{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e47e52b9",
   "metadata": {},
   "source": [
    "# data science internship\n",
    "task 1:Stock_Market Prediction And Forecasting Using Stacked LSTM."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2a45cef5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#import Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f4d8834f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np \n",
    "import matplotlib.pyplot as plt \n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "#Ignoring warnings \n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f40d8f9a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Last</th>\n",
       "      <th>Close</th>\n",
       "      <th>Total Trade Quantity</th>\n",
       "      <th>Turnover (Lacs)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-09-28</td>\n",
       "      <td>234.05</td>\n",
       "      <td>235.95</td>\n",
       "      <td>230.20</td>\n",
       "      <td>233.50</td>\n",
       "      <td>233.75</td>\n",
       "      <td>3069914</td>\n",
       "      <td>7162.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018-09-27</td>\n",
       "      <td>234.55</td>\n",
       "      <td>236.80</td>\n",
       "      <td>231.10</td>\n",
       "      <td>233.80</td>\n",
       "      <td>233.25</td>\n",
       "      <td>5082859</td>\n",
       "      <td>11859.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-09-26</td>\n",
       "      <td>240.00</td>\n",
       "      <td>240.00</td>\n",
       "      <td>232.50</td>\n",
       "      <td>235.00</td>\n",
       "      <td>234.25</td>\n",
       "      <td>2240909</td>\n",
       "      <td>5248.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018-09-25</td>\n",
       "      <td>233.30</td>\n",
       "      <td>236.75</td>\n",
       "      <td>232.00</td>\n",
       "      <td>236.25</td>\n",
       "      <td>236.10</td>\n",
       "      <td>2349368</td>\n",
       "      <td>5503.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018-09-24</td>\n",
       "      <td>233.55</td>\n",
       "      <td>239.20</td>\n",
       "      <td>230.75</td>\n",
       "      <td>234.00</td>\n",
       "      <td>233.30</td>\n",
       "      <td>3423509</td>\n",
       "      <td>7999.55</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date    Open    High     Low    Last   Close  Total Trade Quantity  \\\n",
       "0  2018-09-28  234.05  235.95  230.20  233.50  233.75               3069914   \n",
       "1  2018-09-27  234.55  236.80  231.10  233.80  233.25               5082859   \n",
       "2  2018-09-26  240.00  240.00  232.50  235.00  234.25               2240909   \n",
       "3  2018-09-25  233.30  236.75  232.00  236.25  236.10               2349368   \n",
       "4  2018-09-24  233.55  239.20  230.75  234.00  233.30               3423509   \n",
       "\n",
       "   Turnover (Lacs)  \n",
       "0          7162.35  \n",
       "1         11859.95  \n",
       "2          5248.60  \n",
       "3          5503.90  \n",
       "4          7999.55  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_link = \"https://raw.githubusercontent.com/mwitiderrick/stockprice/master/NSE-TATAGLOBAL.csv\"\n",
    "data = pd.read_csv(dataset_link)\n",
    "data.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e2f42b81",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date                    0\n",
       "Open                    0\n",
       "High                    0\n",
       "Low                     0\n",
       "Last                    0\n",
       "Close                   0\n",
       "Total Trade Quantity    0\n",
       "Turnover (Lacs)         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()\n",
    "# No null values so we can proceed\n",
    "                  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4e1765da",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: tensorflow in c:\\users\\shivu\\anaconda\\lib\\site-packages (2.9.1)Note: you may need to restart the kernel to use updated packages.\n",
      "Requirement already satisfied: libclang>=13.0.0 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorflow) (14.0.6)\n",
      "Requirement already satisfied: tensorboard<2.10,>=2.9 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorflow) (2.9.1)\n",
      "Requirement already satisfied: absl-py>=1.0.0 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorflow) (1.2.0)\n",
      "Requirement already satisfied: h5py>=2.9.0 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorflow) (3.2.1)\n",
      "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorflow) (0.26.0)\n",
      "Requirement already satisfied: flatbuffers<2,>=1.12 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorflow) (1.12)\n",
      "Requirement already satisfied: termcolor>=1.1.0 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorflow) (1.1.0)\n",
      "Requirement already satisfied: typing-extensions>=3.6.6 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorflow) (3.10.0.2)\n",
      "Requirement already satisfied: opt-einsum>=2.3.2 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorflow) (3.3.0)\n",
      "Requirement already satisfied: tensorflow-estimator<2.10.0,>=2.9.0rc0 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorflow) (2.9.0)\n",
      "Requirement already satisfied: keras<2.10.0,>=2.9.0rc0 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorflow) (2.9.0)\n",
      "Requirement already satisfied: wrapt>=1.11.0 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorflow) (1.12.1)\n",
      "Requirement already satisfied: grpcio<2.0,>=1.24.3 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorflow) (1.47.0)\n",
      "Requirement already satisfied: gast<=0.4.0,>=0.2.1 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorflow) (0.4.0)\n",
      "Requirement already satisfied: packaging in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorflow) (21.0)\n",
      "\n",
      "Requirement already satisfied: setuptools in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorflow) (58.0.4)\n",
      "Requirement already satisfied: astunparse>=1.6.0 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorflow) (1.6.3)\n",
      "Requirement already satisfied: protobuf<3.20,>=3.9.2 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorflow) (3.19.4)\n",
      "Requirement already satisfied: numpy>=1.20 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorflow) (1.20.3)\n",
      "Requirement already satisfied: keras-preprocessing>=1.1.1 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorflow) (1.1.2)\n",
      "Requirement already satisfied: google-pasta>=0.1.1 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorflow) (0.2.0)\n",
      "Requirement already satisfied: six>=1.12.0 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorflow) (1.16.0)\n",
      "Requirement already satisfied: wheel<1.0,>=0.23.0 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from astunparse>=1.6.0->tensorflow) (0.37.0)\n",
      "Requirement already satisfied: markdown>=2.6.8 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorboard<2.10,>=2.9->tensorflow) (3.4.1)\n",
      "Requirement already satisfied: requests<3,>=2.21.0 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorboard<2.10,>=2.9->tensorflow) (2.26.0)\n",
      "Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorboard<2.10,>=2.9->tensorflow) (0.4.6)\n",
      "Requirement already satisfied: google-auth<3,>=1.6.3 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorboard<2.10,>=2.9->tensorflow) (2.11.0)\n",
      "Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorboard<2.10,>=2.9->tensorflow) (0.6.1)\n",
      "Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorboard<2.10,>=2.9->tensorflow) (1.8.1)\n",
      "Requirement already satisfied: werkzeug>=1.0.1 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from tensorboard<2.10,>=2.9->tensorflow) (2.0.2)\n",
      "Requirement already satisfied: pyparsing>=2.0.2 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from packaging->tensorflow) (3.0.4)\n",
      "Requirement already satisfied: rsa<5,>=3.1.4 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from google-auth<3,>=1.6.3->tensorboard<2.10,>=2.9->tensorflow) (4.9)\n",
      "Requirement already satisfied: cachetools<6.0,>=2.0.0 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from google-auth<3,>=1.6.3->tensorboard<2.10,>=2.9->tensorflow) (5.2.0)\n",
      "Requirement already satisfied: pyasn1-modules>=0.2.1 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from google-auth<3,>=1.6.3->tensorboard<2.10,>=2.9->tensorflow) (0.2.8)\n",
      "Requirement already satisfied: requests-oauthlib>=0.7.0 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.10,>=2.9->tensorflow) (1.3.1)\n",
      "Requirement already satisfied: importlib-metadata>=4.4 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from markdown>=2.6.8->tensorboard<2.10,>=2.9->tensorflow) (4.8.1)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard<2.10,>=2.9->tensorflow) (1.26.7)\n",
      "Requirement already satisfied: charset-normalizer~=2.0.0 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard<2.10,>=2.9->tensorflow) (2.0.4)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard<2.10,>=2.9->tensorflow) (2021.10.8)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard<2.10,>=2.9->tensorflow) (3.2)\n",
      "Requirement already satisfied: zipp>=0.5 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<2.10,>=2.9->tensorflow) (3.6.0)\n",
      "Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.10,>=2.9->tensorflow) (0.4.8)\n",
      "Requirement already satisfied: oauthlib>=3.0.0 in c:\\users\\shivu\\anaconda\\lib\\site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.10,>=2.9->tensorflow) (3.2.0)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: Ignoring invalid distribution -ip (c:\\users\\shivu\\anaconda\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -ip (c:\\users\\shivu\\anaconda\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -ip (c:\\users\\shivu\\anaconda\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -ip (c:\\users\\shivu\\anaconda\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -ip (c:\\users\\shivu\\anaconda\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -ip (c:\\users\\shivu\\anaconda\\lib\\site-packages)\n"
     ]
    }
   ],
   "source": [
    "pip install tensorflow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2e320dcc",
   "metadata": {},
   "outputs": [],
   "source": [
    "data['Date'] = pd.to_datetime(data['Date'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4c0f3f38",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Last</th>\n",
       "      <th>Close</th>\n",
       "      <th>Total Trade Quantity</th>\n",
       "      <th>Turnover (Lacs)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2034</th>\n",
       "      <td>2010-07-21</td>\n",
       "      <td>122.1</td>\n",
       "      <td>123.00</td>\n",
       "      <td>121.05</td>\n",
       "      <td>121.10</td>\n",
       "      <td>121.55</td>\n",
       "      <td>658666</td>\n",
       "      <td>803.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2033</th>\n",
       "      <td>2010-07-22</td>\n",
       "      <td>120.3</td>\n",
       "      <td>122.00</td>\n",
       "      <td>120.25</td>\n",
       "      <td>120.75</td>\n",
       "      <td>120.90</td>\n",
       "      <td>293312</td>\n",
       "      <td>355.17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2032</th>\n",
       "      <td>2010-07-23</td>\n",
       "      <td>121.8</td>\n",
       "      <td>121.95</td>\n",
       "      <td>120.25</td>\n",
       "      <td>120.35</td>\n",
       "      <td>120.65</td>\n",
       "      <td>281312</td>\n",
       "      <td>340.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2031</th>\n",
       "      <td>2010-07-26</td>\n",
       "      <td>120.1</td>\n",
       "      <td>121.00</td>\n",
       "      <td>117.10</td>\n",
       "      <td>117.10</td>\n",
       "      <td>117.60</td>\n",
       "      <td>658440</td>\n",
       "      <td>780.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2030</th>\n",
       "      <td>2010-07-27</td>\n",
       "      <td>117.6</td>\n",
       "      <td>119.50</td>\n",
       "      <td>112.00</td>\n",
       "      <td>118.80</td>\n",
       "      <td>118.65</td>\n",
       "      <td>586100</td>\n",
       "      <td>694.98</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Date   Open    High     Low    Last   Close  Total Trade Quantity  \\\n",
       "2034 2010-07-21  122.1  123.00  121.05  121.10  121.55                658666   \n",
       "2033 2010-07-22  120.3  122.00  120.25  120.75  120.90                293312   \n",
       "2032 2010-07-23  121.8  121.95  120.25  120.35  120.65                281312   \n",
       "2031 2010-07-26  120.1  121.00  117.10  117.10  117.60                658440   \n",
       "2030 2010-07-27  117.6  119.50  112.00  118.80  118.65                586100   \n",
       "\n",
       "      Turnover (Lacs)  \n",
       "2034           803.56  \n",
       "2033           355.17  \n",
       "2032           340.31  \n",
       "2031           780.01  \n",
       "2030           694.98  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = data.sort_values('Date')\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5360bbfb",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.reset_index(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a30c12bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x19eee70fb20>]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(df['Close'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "95c2ab04",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       121.55\n",
       "1       120.90\n",
       "2       120.65\n",
       "3       117.60\n",
       "4       118.65\n",
       "         ...  \n",
       "2030    233.30\n",
       "2031    236.10\n",
       "2032    234.25\n",
       "2033    233.25\n",
       "2034    233.75\n",
       "Name: Close, Length: 2035, dtype: float64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_close = df['Close']\n",
    "df_close\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "cd1eaa04",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MinMaxScaler()"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaler = MinMaxScaler(feature_range=(0,1))\n",
    "scaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d0536a8f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.16584967],\n",
       "       [0.16319444],\n",
       "       [0.1621732 ],\n",
       "       ...,\n",
       "       [0.62622549],\n",
       "       [0.62214052],\n",
       "       [0.62418301]])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_close = scaler.fit_transform(np.array(df_close).reshape(-1,1))\n",
    "df_close"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "552839de",
   "metadata": {},
   "outputs": [],
   "source": [
    "training_size = int(len(df_close)*0.70)\n",
    "test_size = len(df_close) - training_size\n",
    "train, test = df_close[0: training_size,:], df_close[training_size : len(df_close),:1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d4ac0eba",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Let us convert the array values previously calculated into a matrix\n",
    "def create_mat(ds, time_step = 1):\n",
    "    dataX, dataY = [], []\n",
    "    for i in range(len(ds)-time_step-1):\n",
    "        a = ds[i:(i+time_step),0]\n",
    "        dataX.append(a)\n",
    "        dataY.append(ds[i + time_step, 0])\n",
    "    return np.array(dataX), np.array(dataY)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "116416cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "time_step = 100\n",
    "X_train, y_train = create_mat(train, time_step)\n",
    "X_test, y_test = create_mat(test, time_step)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "493cb1c9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1323, 100)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "edb28b54",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1323,)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "444833f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(510, 100)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "488a8538",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(510,)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "5fc89531",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)\n",
    "X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)\n",
    "#It is now time to Create the LSTM Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "43af7a95",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense\n",
    "from tensorflow.keras.layers import LSTM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ee992d9c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm (LSTM)                 (None, 100, 50)           10400     \n",
      "                                                                 \n",
      " lstm_1 (LSTM)               (None, 100, 50)           20200     \n",
      "                                                                 \n",
      " lstm_2 (LSTM)               (None, 50)                20200     \n",
      "                                                                 \n",
      " dense (Dense)               (None, 1)                 51        \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 50,851\n",
      "Trainable params: 50,851\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "model.add(LSTM(50,return_sequences=True,input_shape=(100,1)))\n",
    "model.add(LSTM(50,return_sequences=True))\n",
    "model.add(LSTM(50))\n",
    "model.add(Dense(1))\n",
    "model.compile(loss='mean_squared_error',optimizer='adam')\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "644ee97b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/60\n",
      "19/19 [==============================] - 34s 764ms/step - loss: 0.0090 - val_loss: 0.0023\n",
      "Epoch 2/60\n",
      "19/19 [==============================] - 8s 406ms/step - loss: 0.0016 - val_loss: 0.0014\n",
      "Epoch 3/60\n",
      "19/19 [==============================] - 10s 498ms/step - loss: 8.9846e-04 - val_loss: 0.0012\n",
      "Epoch 4/60\n",
      "19/19 [==============================] - 8s 432ms/step - loss: 8.7974e-04 - val_loss: 0.0012\n",
      "Epoch 5/60\n",
      "19/19 [==============================] - 8s 419ms/step - loss: 8.8029e-04 - val_loss: 0.0013\n",
      "Epoch 6/60\n",
      "19/19 [==============================] - 8s 401ms/step - loss: 8.7946e-04 - val_loss: 0.0011\n",
      "Epoch 7/60\n",
      "19/19 [==============================] - 8s 397ms/step - loss: 7.9319e-04 - val_loss: 0.0010\n",
      "Epoch 8/60\n",
      "19/19 [==============================] - 11s 571ms/step - loss: 7.6109e-04 - val_loss: 0.0010\n",
      "Epoch 9/60\n",
      "19/19 [==============================] - 8s 437ms/step - loss: 7.4320e-04 - val_loss: 9.3310e-04\n",
      "Epoch 10/60\n",
      "19/19 [==============================] - 8s 393ms/step - loss: 6.9955e-04 - val_loss: 8.9568e-04\n",
      "Epoch 11/60\n",
      "19/19 [==============================] - 8s 445ms/step - loss: 7.0919e-04 - val_loss: 8.2303e-04\n",
      "Epoch 12/60\n",
      "19/19 [==============================] - 8s 427ms/step - loss: 7.0074e-04 - val_loss: 8.2737e-04\n",
      "Epoch 13/60\n",
      "19/19 [==============================] - 7s 387ms/step - loss: 6.4795e-04 - val_loss: 7.7649e-04\n",
      "Epoch 14/60\n",
      "19/19 [==============================] - 8s 400ms/step - loss: 6.2795e-04 - val_loss: 7.1720e-04\n",
      "Epoch 15/60\n",
      "19/19 [==============================] - 7s 352ms/step - loss: 6.0392e-04 - val_loss: 6.9631e-04\n",
      "Epoch 16/60\n",
      "19/19 [==============================] - 7s 382ms/step - loss: 6.0633e-04 - val_loss: 8.1967e-04\n",
      "Epoch 17/60\n",
      "19/19 [==============================] - 7s 377ms/step - loss: 6.0151e-04 - val_loss: 7.1313e-04\n",
      "Epoch 18/60\n",
      "19/19 [==============================] - 12s 651ms/step - loss: 5.5881e-04 - val_loss: 6.4424e-04\n",
      "Epoch 19/60\n",
      "19/19 [==============================] - 7s 389ms/step - loss: 5.5517e-04 - val_loss: 6.2058e-04\n",
      "Epoch 20/60\n",
      "19/19 [==============================] - 7s 374ms/step - loss: 5.4478e-04 - val_loss: 5.9686e-04\n",
      "Epoch 21/60\n",
      "19/19 [==============================] - 8s 398ms/step - loss: 5.4432e-04 - val_loss: 5.9666e-04\n",
      "Epoch 22/60\n",
      "19/19 [==============================] - 7s 373ms/step - loss: 5.0841e-04 - val_loss: 5.4835e-04\n",
      "Epoch 23/60\n",
      "19/19 [==============================] - 6s 344ms/step - loss: 4.9127e-04 - val_loss: 5.3936e-04\n",
      "Epoch 24/60\n",
      "19/19 [==============================] - 7s 361ms/step - loss: 4.9416e-04 - val_loss: 5.8971e-04\n",
      "Epoch 25/60\n",
      "19/19 [==============================] - 7s 346ms/step - loss: 4.7644e-04 - val_loss: 5.0116e-04\n",
      "Epoch 26/60\n",
      "19/19 [==============================] - 8s 408ms/step - loss: 4.8093e-04 - val_loss: 5.2458e-04\n",
      "Epoch 27/60\n",
      "19/19 [==============================] - 6s 333ms/step - loss: 4.7295e-04 - val_loss: 5.3612e-04\n",
      "Epoch 28/60\n",
      "19/19 [==============================] - 6s 320ms/step - loss: 4.3319e-04 - val_loss: 4.9391e-04\n",
      "Epoch 29/60\n",
      "19/19 [==============================] - 6s 335ms/step - loss: 4.3966e-04 - val_loss: 4.5072e-04\n",
      "Epoch 30/60\n",
      "19/19 [==============================] - 6s 341ms/step - loss: 4.7833e-04 - val_loss: 5.0339e-04\n",
      "Epoch 31/60\n",
      "19/19 [==============================] - 7s 366ms/step - loss: 5.2150e-04 - val_loss: 4.4634e-04\n",
      "Epoch 32/60\n",
      "19/19 [==============================] - 7s 377ms/step - loss: 4.2706e-04 - val_loss: 4.0847e-04\n",
      "Epoch 33/60\n",
      "19/19 [==============================] - 7s 374ms/step - loss: 3.7493e-04 - val_loss: 3.7371e-04\n",
      "Epoch 34/60\n",
      "19/19 [==============================] - 7s 385ms/step - loss: 3.9987e-04 - val_loss: 3.6198e-04\n",
      "Epoch 35/60\n",
      "19/19 [==============================] - 7s 369ms/step - loss: 3.5586e-04 - val_loss: 3.4751e-04\n",
      "Epoch 36/60\n",
      "19/19 [==============================] - 7s 371ms/step - loss: 3.5750e-04 - val_loss: 3.0991e-04\n",
      "Epoch 37/60\n",
      "19/19 [==============================] - 7s 372ms/step - loss: 3.6953e-04 - val_loss: 3.0736e-04\n",
      "Epoch 38/60\n",
      "19/19 [==============================] - 7s 375ms/step - loss: 3.7589e-04 - val_loss: 3.5730e-04\n",
      "Epoch 39/60\n",
      "19/19 [==============================] - 7s 378ms/step - loss: 3.2779e-04 - val_loss: 3.3989e-04\n",
      "Epoch 40/60\n",
      "19/19 [==============================] - 7s 379ms/step - loss: 3.0505e-04 - val_loss: 2.7744e-04\n",
      "Epoch 41/60\n",
      "19/19 [==============================] - 7s 392ms/step - loss: 3.0708e-04 - val_loss: 3.1683e-04\n",
      "Epoch 42/60\n",
      "19/19 [==============================] - 7s 381ms/step - loss: 3.0124e-04 - val_loss: 2.5758e-04\n",
      "Epoch 43/60\n",
      "19/19 [==============================] - 7s 369ms/step - loss: 2.8663e-04 - val_loss: 2.5458e-04\n",
      "Epoch 44/60\n",
      "19/19 [==============================] - 7s 390ms/step - loss: 2.8611e-04 - val_loss: 3.5006e-04\n",
      "Epoch 45/60\n",
      "19/19 [==============================] - 6s 334ms/step - loss: 2.9022e-04 - val_loss: 3.1609e-04\n",
      "Epoch 46/60\n",
      "19/19 [==============================] - 7s 356ms/step - loss: 3.1736e-04 - val_loss: 2.6580e-04\n",
      "Epoch 47/60\n",
      "19/19 [==============================] - 7s 386ms/step - loss: 2.9303e-04 - val_loss: 2.2845e-04\n",
      "Epoch 48/60\n",
      "19/19 [==============================] - 7s 350ms/step - loss: 2.5482e-04 - val_loss: 2.3136e-04\n",
      "Epoch 49/60\n",
      "19/19 [==============================] - 7s 387ms/step - loss: 2.3971e-04 - val_loss: 2.0736e-04\n",
      "Epoch 50/60\n",
      "19/19 [==============================] - 8s 399ms/step - loss: 2.3983e-04 - val_loss: 2.0468e-04\n",
      "Epoch 51/60\n",
      "19/19 [==============================] - 8s 394ms/step - loss: 2.2994e-04 - val_loss: 2.0091e-04\n",
      "Epoch 52/60\n",
      "19/19 [==============================] - 8s 418ms/step - loss: 2.3893e-04 - val_loss: 2.0143e-04\n",
      "Epoch 53/60\n",
      "19/19 [==============================] - 7s 370ms/step - loss: 2.3296e-04 - val_loss: 1.9301e-04\n",
      "Epoch 54/60\n",
      "19/19 [==============================] - 6s 329ms/step - loss: 2.5914e-04 - val_loss: 2.4812e-04\n",
      "Epoch 55/60\n",
      "19/19 [==============================] - 7s 385ms/step - loss: 2.4213e-04 - val_loss: 2.1144e-04\n",
      "Epoch 56/60\n",
      "19/19 [==============================] - 7s 366ms/step - loss: 2.0494e-04 - val_loss: 1.8113e-04\n",
      "Epoch 57/60\n",
      "19/19 [==============================] - 8s 406ms/step - loss: 2.1328e-04 - val_loss: 2.5542e-04\n",
      "Epoch 58/60\n",
      "19/19 [==============================] - 5s 275ms/step - loss: 2.4845e-04 - val_loss: 2.3290e-04\n",
      "Epoch 59/60\n",
      "19/19 [==============================] - 3s 171ms/step - loss: 1.9659e-04 - val_loss: 1.6956e-04\n",
      "Epoch 60/60\n",
      "19/19 [==============================] - 3s 181ms/step - loss: 1.9059e-04 - val_loss: 1.6935e-04\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x19ef7101610>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(X_train, y_train, validation_split=0.1, epochs= 60, batch_size=64, verbose = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "0b75c793",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "16/16 [==============================] - 1s 32ms/step\n"
     ]
    }
   ],
   "source": [
    "predictions = model.predict(X_test)\n",
    "# performing inverse transform on predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "7f28951a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[140.83588 ],\n",
       "       [140.95789 ],\n",
       "       [140.03369 ],\n",
       "       [137.29025 ],\n",
       "       [135.50008 ],\n",
       "       [135.15002 ],\n",
       "       [136.65744 ],\n",
       "       [138.49277 ],\n",
       "       [138.7962  ],\n",
       "       [137.9862  ],\n",
       "       [137.38542 ],\n",
       "       [138.59546 ],\n",
       "       [139.77962 ],\n",
       "       [141.55565 ],\n",
       "       [143.81686 ],\n",
       "       [141.74881 ],\n",
       "       [138.76698 ],\n",
       "       [138.2116  ],\n",
       "       [139.33206 ],\n",
       "       [144.87785 ],\n",
       "       [149.79257 ],\n",
       "       [151.5914  ],\n",
       "       [151.00575 ],\n",
       "       [148.33153 ],\n",
       "       [148.10324 ],\n",
       "       [148.62823 ],\n",
       "       [149.60184 ],\n",
       "       [151.38748 ],\n",
       "       [151.9366  ],\n",
       "       [151.46294 ],\n",
       "       [151.46112 ],\n",
       "       [150.29588 ],\n",
       "       [147.05356 ],\n",
       "       [141.27257 ],\n",
       "       [137.69229 ],\n",
       "       [137.04692 ],\n",
       "       [137.69655 ],\n",
       "       [137.00899 ],\n",
       "       [134.2758  ],\n",
       "       [130.0594  ],\n",
       "       [127.25785 ],\n",
       "       [126.35844 ],\n",
       "       [124.86975 ],\n",
       "       [124.24731 ],\n",
       "       [122.3536  ],\n",
       "       [119.61969 ],\n",
       "       [118.716934],\n",
       "       [118.61749 ],\n",
       "       [119.136024],\n",
       "       [118.40962 ],\n",
       "       [117.41575 ],\n",
       "       [116.86749 ],\n",
       "       [116.097755],\n",
       "       [116.26732 ],\n",
       "       [117.74797 ],\n",
       "       [119.771095],\n",
       "       [121.819664],\n",
       "       [122.53229 ],\n",
       "       [121.99368 ],\n",
       "       [121.688286],\n",
       "       [121.823715],\n",
       "       [121.849174],\n",
       "       [122.189995],\n",
       "       [122.68829 ],\n",
       "       [122.92267 ],\n",
       "       [122.89209 ],\n",
       "       [122.580826],\n",
       "       [122.76642 ],\n",
       "       [123.23669 ],\n",
       "       [123.64714 ],\n",
       "       [122.89391 ],\n",
       "       [121.745346],\n",
       "       [120.281044],\n",
       "       [119.00249 ],\n",
       "       [117.77212 ],\n",
       "       [117.94891 ],\n",
       "       [118.717026],\n",
       "       [119.79382 ],\n",
       "       [120.86982 ],\n",
       "       [121.985504],\n",
       "       [123.022606],\n",
       "       [123.644196],\n",
       "       [124.01243 ],\n",
       "       [123.99661 ],\n",
       "       [123.8145  ],\n",
       "       [123.575836],\n",
       "       [124.385765],\n",
       "       [124.90391 ],\n",
       "       [125.86883 ],\n",
       "       [126.65563 ],\n",
       "       [126.97162 ],\n",
       "       [127.25063 ],\n",
       "       [128.10626 ],\n",
       "       [127.74151 ],\n",
       "       [127.09145 ],\n",
       "       [126.90005 ],\n",
       "       [127.1079  ],\n",
       "       [127.69453 ],\n",
       "       [128.6554  ],\n",
       "       [128.93655 ],\n",
       "       [129.01494 ],\n",
       "       [131.55223 ],\n",
       "       [136.29604 ],\n",
       "       [140.61014 ],\n",
       "       [142.16154 ],\n",
       "       [143.05977 ],\n",
       "       [142.9118  ],\n",
       "       [142.33916 ],\n",
       "       [141.2137  ],\n",
       "       [140.0475  ],\n",
       "       [138.57246 ],\n",
       "       [138.04279 ],\n",
       "       [138.40465 ],\n",
       "       [139.5515  ],\n",
       "       [140.58047 ],\n",
       "       [140.40462 ],\n",
       "       [139.30353 ],\n",
       "       [138.15352 ],\n",
       "       [137.26866 ],\n",
       "       [138.8764  ],\n",
       "       [140.42944 ],\n",
       "       [141.68617 ],\n",
       "       [142.22334 ],\n",
       "       [141.97287 ],\n",
       "       [140.97176 ],\n",
       "       [139.83824 ],\n",
       "       [137.86763 ],\n",
       "       [137.07181 ],\n",
       "       [137.96385 ],\n",
       "       [140.7298  ],\n",
       "       [143.31152 ],\n",
       "       [145.01988 ],\n",
       "       [145.3258  ],\n",
       "       [143.75517 ],\n",
       "       [145.16457 ],\n",
       "       [147.99236 ],\n",
       "       [148.97168 ],\n",
       "       [148.92682 ],\n",
       "       [148.67061 ],\n",
       "       [148.43407 ],\n",
       "       [148.52217 ],\n",
       "       [149.31133 ],\n",
       "       [150.43811 ],\n",
       "       [151.33366 ],\n",
       "       [150.67732 ],\n",
       "       [149.58983 ],\n",
       "       [149.98044 ],\n",
       "       [150.48561 ],\n",
       "       [150.07173 ],\n",
       "       [148.8601  ],\n",
       "       [147.36021 ],\n",
       "       [147.28293 ],\n",
       "       [148.88838 ],\n",
       "       [150.20934 ],\n",
       "       [150.7465  ],\n",
       "       [150.53848 ],\n",
       "       [150.94135 ],\n",
       "       [150.99023 ],\n",
       "       [151.09377 ],\n",
       "       [153.10529 ],\n",
       "       [154.74718 ],\n",
       "       [154.76022 ],\n",
       "       [152.64204 ],\n",
       "       [150.66449 ],\n",
       "       [150.60638 ],\n",
       "       [151.98875 ],\n",
       "       [152.92406 ],\n",
       "       [152.39485 ],\n",
       "       [152.14034 ],\n",
       "       [152.36293 ],\n",
       "       [152.06096 ],\n",
       "       [149.33463 ],\n",
       "       [147.30042 ],\n",
       "       [146.28511 ],\n",
       "       [144.97699 ],\n",
       "       [142.69574 ],\n",
       "       [141.36325 ],\n",
       "       [142.75156 ],\n",
       "       [144.45613 ],\n",
       "       [145.19977 ],\n",
       "       [146.4515  ],\n",
       "       [148.81978 ],\n",
       "       [151.7347  ],\n",
       "       [153.55495 ],\n",
       "       [153.02747 ],\n",
       "       [152.56963 ],\n",
       "       [152.39758 ],\n",
       "       [152.39072 ],\n",
       "       [151.5165  ],\n",
       "       [152.29817 ],\n",
       "       [154.71567 ],\n",
       "       [157.03316 ],\n",
       "       [157.60748 ],\n",
       "       [156.19542 ],\n",
       "       [154.78917 ],\n",
       "       [154.34212 ],\n",
       "       [153.78053 ],\n",
       "       [151.74901 ],\n",
       "       [148.27795 ],\n",
       "       [146.49924 ],\n",
       "       [146.43904 ],\n",
       "       [147.94467 ],\n",
       "       [149.79074 ],\n",
       "       [150.14578 ],\n",
       "       [151.83008 ],\n",
       "       [152.6982  ],\n",
       "       [154.2285  ],\n",
       "       [159.25229 ],\n",
       "       [165.27013 ],\n",
       "       [170.34338 ],\n",
       "       [173.03998 ],\n",
       "       [172.70723 ],\n",
       "       [172.54907 ],\n",
       "       [171.56775 ],\n",
       "       [171.25403 ],\n",
       "       [169.8205  ],\n",
       "       [168.85565 ],\n",
       "       [167.83705 ],\n",
       "       [167.79065 ],\n",
       "       [168.80994 ],\n",
       "       [168.0058  ],\n",
       "       [166.79002 ],\n",
       "       [166.43118 ],\n",
       "       [165.8265  ],\n",
       "       [164.12651 ],\n",
       "       [163.37317 ],\n",
       "       [163.57321 ],\n",
       "       [165.81732 ],\n",
       "       [165.93163 ],\n",
       "       [162.73079 ],\n",
       "       [156.96152 ],\n",
       "       [156.6395  ],\n",
       "       [166.2987  ],\n",
       "       [183.19208 ],\n",
       "       [192.67766 ],\n",
       "       [193.79317 ],\n",
       "       [191.95721 ],\n",
       "       [187.59291 ],\n",
       "       [187.9864  ],\n",
       "       [189.68822 ],\n",
       "       [189.84361 ],\n",
       "       [187.46225 ],\n",
       "       [188.92558 ],\n",
       "       [192.45032 ],\n",
       "       [194.25879 ],\n",
       "       [191.65668 ],\n",
       "       [190.39064 ],\n",
       "       [196.00397 ],\n",
       "       [201.49928 ],\n",
       "       [203.33545 ],\n",
       "       [203.63072 ],\n",
       "       [205.0491  ],\n",
       "       [203.69553 ],\n",
       "       [204.13434 ],\n",
       "       [204.66386 ],\n",
       "       [206.12402 ],\n",
       "       [208.74168 ],\n",
       "       [208.81824 ],\n",
       "       [206.65816 ],\n",
       "       [198.9407  ],\n",
       "       [191.06958 ],\n",
       "       [192.88179 ],\n",
       "       [194.89638 ],\n",
       "       [196.90117 ],\n",
       "       [199.31674 ],\n",
       "       [201.0252  ],\n",
       "       [200.57782 ],\n",
       "       [201.89491 ],\n",
       "       [203.64125 ],\n",
       "       [203.53236 ],\n",
       "       [202.58394 ],\n",
       "       [202.5628  ],\n",
       "       [204.51556 ],\n",
       "       [205.1264  ],\n",
       "       [204.10718 ],\n",
       "       [203.53484 ],\n",
       "       [201.81146 ],\n",
       "       [199.27539 ],\n",
       "       [197.20079 ],\n",
       "       [200.27112 ],\n",
       "       [201.54982 ],\n",
       "       [202.98257 ],\n",
       "       [209.89218 ],\n",
       "       [218.84761 ],\n",
       "       [222.73195 ],\n",
       "       [222.13077 ],\n",
       "       [219.59619 ],\n",
       "       [217.49529 ],\n",
       "       [222.36174 ],\n",
       "       [221.42488 ],\n",
       "       [217.22687 ],\n",
       "       [224.39772 ],\n",
       "       [229.92543 ],\n",
       "       [228.6944  ],\n",
       "       [232.92752 ],\n",
       "       [240.136   ],\n",
       "       [243.76355 ],\n",
       "       [247.91353 ],\n",
       "       [258.97803 ],\n",
       "       [264.20593 ],\n",
       "       [263.30753 ],\n",
       "       [261.39044 ],\n",
       "       [262.9327  ],\n",
       "       [263.5463  ],\n",
       "       [269.2352  ],\n",
       "       [268.07883 ],\n",
       "       [269.01242 ],\n",
       "       [268.3879  ],\n",
       "       [264.32962 ],\n",
       "       [262.46594 ],\n",
       "       [259.72995 ],\n",
       "       [264.12354 ],\n",
       "       [270.9894  ],\n",
       "       [279.61783 ],\n",
       "       [276.22748 ],\n",
       "       [268.6566  ],\n",
       "       [265.69858 ],\n",
       "       [268.0975  ],\n",
       "       [272.56158 ],\n",
       "       [280.42456 ],\n",
       "       [284.12204 ],\n",
       "       [283.22058 ],\n",
       "       [283.35443 ],\n",
       "       [285.89444 ],\n",
       "       [286.7756  ],\n",
       "       [286.76886 ],\n",
       "       [292.7874  ],\n",
       "       [294.20178 ],\n",
       "       [291.42664 ],\n",
       "       [289.59607 ],\n",
       "       [290.16995 ],\n",
       "       [291.2684  ],\n",
       "       [294.5074  ],\n",
       "       [294.6431  ],\n",
       "       [292.7911  ],\n",
       "       [291.35776 ],\n",
       "       [299.1737  ],\n",
       "       [302.36273 ],\n",
       "       [296.94797 ],\n",
       "       [291.2508  ],\n",
       "       [284.71948 ],\n",
       "       [284.3304  ],\n",
       "       [286.5637  ],\n",
       "       [286.55737 ],\n",
       "       [284.04105 ],\n",
       "       [282.99506 ],\n",
       "       [281.90298 ],\n",
       "       [282.91672 ],\n",
       "       [275.28842 ],\n",
       "       [268.6023  ],\n",
       "       [259.09888 ],\n",
       "       [254.21584 ],\n",
       "       [250.784   ],\n",
       "       [258.7514  ],\n",
       "       [265.60788 ],\n",
       "       [265.16122 ],\n",
       "       [267.3688  ],\n",
       "       [267.8366  ],\n",
       "       [265.0432  ],\n",
       "       [260.8147  ],\n",
       "       [254.24469 ],\n",
       "       [248.12163 ],\n",
       "       [249.08238 ],\n",
       "       [249.20322 ],\n",
       "       [253.7668  ],\n",
       "       [259.06903 ],\n",
       "       [261.72745 ],\n",
       "       [262.01215 ],\n",
       "       [261.08087 ],\n",
       "       [260.90787 ],\n",
       "       [260.08493 ],\n",
       "       [255.99414 ],\n",
       "       [256.36407 ],\n",
       "       [255.22253 ],\n",
       "       [258.7034  ],\n",
       "       [263.12317 ],\n",
       "       [264.64023 ],\n",
       "       [264.76523 ],\n",
       "       [259.988   ],\n",
       "       [249.09502 ],\n",
       "       [244.75809 ],\n",
       "       [247.1993  ],\n",
       "       [246.97649 ],\n",
       "       [244.81424 ],\n",
       "       [246.77782 ],\n",
       "       [250.391   ],\n",
       "       [248.64954 ],\n",
       "       [257.34137 ],\n",
       "       [263.4011  ],\n",
       "       [260.3742  ],\n",
       "       [257.96652 ],\n",
       "       [257.9625  ],\n",
       "       [261.6618  ],\n",
       "       [262.31757 ],\n",
       "       [259.94708 ],\n",
       "       [258.41202 ],\n",
       "       [259.52478 ],\n",
       "       [263.29495 ],\n",
       "       [265.98587 ],\n",
       "       [268.23392 ],\n",
       "       [270.2564  ],\n",
       "       [270.83124 ],\n",
       "       [268.6465  ],\n",
       "       [266.66907 ],\n",
       "       [270.0537  ],\n",
       "       [274.1391  ],\n",
       "       [275.6583  ],\n",
       "       [278.7179  ],\n",
       "       [277.31848 ],\n",
       "       [271.11374 ],\n",
       "       [268.58035 ],\n",
       "       [273.51923 ],\n",
       "       [274.16943 ],\n",
       "       [273.77588 ],\n",
       "       [269.5548  ],\n",
       "       [268.51746 ],\n",
       "       [249.07832 ],\n",
       "       [227.63481 ],\n",
       "       [222.02324 ],\n",
       "       [230.52272 ],\n",
       "       [235.1686  ],\n",
       "       [233.52228 ],\n",
       "       [234.01561 ],\n",
       "       [238.04019 ],\n",
       "       [243.20567 ],\n",
       "       [247.06165 ],\n",
       "       [249.4637  ],\n",
       "       [247.85138 ],\n",
       "       [250.0168  ],\n",
       "       [255.35678 ],\n",
       "       [254.03899 ],\n",
       "       [245.55276 ],\n",
       "       [245.97961 ],\n",
       "       [251.45175 ],\n",
       "       [254.85187 ],\n",
       "       [254.67992 ],\n",
       "       [251.60645 ],\n",
       "       [252.32149 ],\n",
       "       [255.42683 ],\n",
       "       [261.93057 ],\n",
       "       [261.50876 ],\n",
       "       [260.47055 ],\n",
       "       [255.29608 ],\n",
       "       [247.9685  ],\n",
       "       [243.45975 ],\n",
       "       [245.75867 ],\n",
       "       [250.28679 ],\n",
       "       [253.80896 ],\n",
       "       [253.54655 ],\n",
       "       [251.28592 ],\n",
       "       [253.60248 ],\n",
       "       [253.08641 ],\n",
       "       [261.6226  ],\n",
       "       [265.72546 ],\n",
       "       [260.63202 ],\n",
       "       [252.8416  ],\n",
       "       [255.83125 ],\n",
       "       [260.42905 ],\n",
       "       [258.0782  ],\n",
       "       [251.85327 ],\n",
       "       [245.27774 ],\n",
       "       [233.49074 ],\n",
       "       [230.78633 ],\n",
       "       [228.43149 ],\n",
       "       [223.43723 ],\n",
       "       [224.44785 ],\n",
       "       [230.76541 ],\n",
       "       [236.40564 ],\n",
       "       [232.04684 ],\n",
       "       [227.9873  ],\n",
       "       [229.83414 ],\n",
       "       [232.67122 ],\n",
       "       [236.0844  ],\n",
       "       [230.68332 ],\n",
       "       [224.94904 ],\n",
       "       [223.40337 ],\n",
       "       [227.45673 ],\n",
       "       [229.55869 ],\n",
       "       [228.17012 ],\n",
       "       [227.20972 ],\n",
       "       [225.29587 ],\n",
       "       [224.70648 ],\n",
       "       [226.95103 ],\n",
       "       [229.86356 ],\n",
       "       [233.05722 ],\n",
       "       [235.59267 ],\n",
       "       [233.42828 ],\n",
       "       [227.61862 ],\n",
       "       [221.81264 ],\n",
       "       [223.7241  ],\n",
       "       [225.35223 ],\n",
       "       [225.57858 ],\n",
       "       [226.16779 ],\n",
       "       [225.82826 ],\n",
       "       [226.72636 ],\n",
       "       [219.95456 ],\n",
       "       [213.26999 ],\n",
       "       [211.08607 ],\n",
       "       [213.26778 ],\n",
       "       [214.86702 ],\n",
       "       [211.32318 ],\n",
       "       [211.80008 ],\n",
       "       [221.0867  ],\n",
       "       [229.53423 ],\n",
       "       [230.35274 ],\n",
       "       [227.42476 ],\n",
       "       [225.39668 ],\n",
       "       [224.47604 ],\n",
       "       [225.92491 ],\n",
       "       [226.13138 ]], dtype=float32)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inv_predictions = scaler.inverse_transform(predictions)\n",
    "inv_predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "5361df60",
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "from sklearn.metrics import mean_squared_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c4ab232e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#MsE value "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "afad2651",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Mean Squared Error for above model is:  0.04512177187395582\n"
     ]
    }
   ],
   "source": [
    "mse = math.sqrt(mean_squared_error(y_test, predictions))\n",
    "print(\"The Mean Squared Error for above model is: \", mse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f22468df",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "18ac048c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
